{"version":3,"sources":["webpack:///./node_modules/@glidejs/glide/dist/glide.esm.js"],"names":["defaults","type","startAt","perView","focusAt","gap","autoplay","hoverpause","keyboard","bound","swipeThreshold","dragThreshold","perTouch","touchRatio","touchAngle","animationDuration","rewind","rewindDuration","animationTimingFunc","throttle","direction","peek","breakpoints","classes","ltr","rtl","slider","carousel","swipeable","dragging","cloneSlide","activeNav","activeSlide","disabledArrow","warn","msg","console","error","_typeof","Symbol","iterator","obj","constructor","prototype","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","_extends","assign","arguments","source","hasOwnProperty","call","possibleConstructorReturn","self","ReferenceError","toInt","value","parseInt","isString","isObject","isFunction","isUndefined","isArray","Array","define","prop","definition","mergeOptions","settings","options","EventsBus","events","undefined","this","hop","event","handler","on","index","push","remove","context","emit","forEach","item","Glide","selector","_c","_t","_e","disabled","extensions","glide","components","name","_name","mount","transformers","pattern","Run","make","distance","Transition","disable","Move","interval","get","_o","set","o","_i","_d","status","now","Date","getTime","func","wait","timeout","args","result","previous","later","leading","apply","throttled","at","remaining","clearTimeout","trailing","setTimeout","cancel","MARGIN_TYPE","siblings","node","parentNode","n","firstChild","matched","nextSibling","nodeType","exist","window","HTMLElement","TRACK_SELECTOR","EventsBinder","listeners","el","closure","capture","addEventListener","removeEventListener","VALID_DIRECTIONS","FLIPED_MOVEMENTS",">","<","=","Rtl","Components","modify","translate","Direction","is","mutator","Events","TRANSFORMERS","Gaps","Clones","grow","Peek","before","width","Sizes","slideWidth","concat","mutate","transformer","supportsPassive","opts","e","supportsPassive$1","START_EVENTS","MOVE_EVENTS","END_EVENTS","MOUSE_EVENTS","NAV_SELECTOR","CONTROLS_SELECTOR","sortBreakpoints","points","keys","sort","reduce","r","k","sortKeys","COMPONENTS","Html","root","track","querySelector","slides","slice","wrapper","children","filter","slide","classList","contains","_r","document","t","Translate","transform","style","isType","isOffset","after","movement","compose","property","duration","transition","callback","enable","offset","resolve","token","split","join","addClass","add","removeClass","_v","indexOf","setupSlides","setupWrapper","dimention","wrapperSize","offsetWidth","reductor","len","marginLeft","marginRight","_this","items","collect","_Glide$settings","part","start","end","Math","max","floor","clone","cloneNode","_clone","unshift","append","_Components$Html","half","prepend","reverse","appendChild","_i2","insertBefore","_i3","removeChild","Resize","Binder","bind","unbind","off","destroy","Build","typeClass","activeClass","sibling","removeClasses","move","calculate","steps","countableSteps","isNumber","isEnd","min","isStart","_m","substr","Swipe","swipeSin","swipeStartX","swipeStartY","moveable","passive","bindSwipeStart","swipe","touches","pageX","pageY","bindSwipeMove","bindSwipeEnd","subExSx","subEySy","powEX","abs","powEY","swipeHypotenuse","sqrt","swipeCathetus","asin","PI","stopPropagation","parseFloat","toFloat","threshold","swipeDistance","swipeDeg","round","unbindSwipeMove","unbindSwipeEnd","unbindSwipeStart","_this2","_this3","changedTouches","Images","dragstart","preventDefault","Anchors","detached","prevented","_a","querySelectorAll","click","detach","draggable","setAttribute","getAttribute","removeAttribute","attach","Controls","_n","addBindings","setActive","removeActive","controls","removeBindings","elements","currentTarget","Keyboard","press","keyCode","Autoplay","setInterval","stop","time","clearInterval","Breakpoints","match","matchMedia","point","matches","Glide$1","_Core","Glide$$1","__proto__","getPrototypeOf","subClass","superClass","create","setPrototypeOf","inherits","object","receiver","Function","desc","getOwnPropertyDescriptor","parent","getter","__webpack_exports__"],"mappings":"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","file":"js/1.e89c89b4.chunk.js","sourcesContent":["/*!\n * Glide.js v3.2.6\n * (c) 2013-2019 Jędrzej Chałubek <jedrzej.chalubek@gmail.com> (http://jedrzejchalubek.com/)\n * Released under the MIT License.\n */\n\nvar defaults = {\n  /**\n   * Type of the movement.\n   *\n   * Available types:\n   * `slider` - Rewinds slider to the start/end when it reaches the first or last slide.\n   * `carousel` - Changes slides without starting over when it reaches the first or last slide.\n   *\n   * @type {String}\n   */\n  type: 'slider',\n\n  /**\n   * Start at specific slide number defined with zero-based index.\n   *\n   * @type {Number}\n   */\n  startAt: 0,\n\n  /**\n   * A number of slides visible on the single viewport.\n   *\n   * @type {Number}\n   */\n  perView: 1,\n\n  /**\n   * Focus currently active slide at a specified position in the track.\n   *\n   * Available inputs:\n   * `center` - Current slide will be always focused at the center of a track.\n   * `0,1,2,3...` - Current slide will be focused on the specified zero-based index.\n   *\n   * @type {String|Number}\n   */\n  focusAt: 0,\n\n  /**\n   * A size of the gap added between slides.\n   *\n   * @type {Number}\n   */\n  gap: 10,\n\n  /**\n   * Change slides after a specified interval. Use `false` for turning off autoplay.\n   *\n   * @type {Number|Boolean}\n   */\n  autoplay: false,\n\n  /**\n   * Stop autoplay on mouseover event.\n   *\n   * @type {Boolean}\n   */\n  hoverpause: true,\n\n  /**\n   * Allow for changing slides with left and right keyboard arrows.\n   *\n   * @type {Boolean}\n   */\n  keyboard: true,\n\n  /**\n   * Stop running `perView` number of slides from the end. Use this\n   * option if you don't want to have an empty space after\n   * a slider. Works only with `slider` type and a\n   * non-centered `focusAt` setting.\n   *\n   * @type {Boolean}\n   */\n  bound: false,\n\n  /**\n   * Minimal swipe distance needed to change the slide. Use `false` for turning off a swiping.\n   *\n   * @type {Number|Boolean}\n   */\n  swipeThreshold: 80,\n\n  /**\n   * Minimal mouse drag distance needed to change the slide. Use `false` for turning off a dragging.\n   *\n   * @type {Number|Boolean}\n   */\n  dragThreshold: 120,\n\n  /**\n   * A maximum number of slides to which movement will be made on swiping or dragging. Use `false` for unlimited.\n   *\n   * @type {Number|Boolean}\n   */\n  perTouch: false,\n\n  /**\n   * Moving distance ratio of the slides on a swiping and dragging.\n   *\n   * @type {Number}\n   */\n  touchRatio: 0.5,\n\n  /**\n   * Angle required to activate slides moving on swiping or dragging.\n   *\n   * @type {Number}\n   */\n  touchAngle: 45,\n\n  /**\n   * Duration of the animation in milliseconds.\n   *\n   * @type {Number}\n   */\n  animationDuration: 400,\n\n  /**\n   * Allows looping the `slider` type. Slider will rewind to the first/last slide when it's at the start/end.\n   *\n   * @type {Boolean}\n   */\n  rewind: true,\n\n  /**\n   * Duration of the rewinding animation of the `slider` type in milliseconds.\n   *\n   * @type {Number}\n   */\n  rewindDuration: 800,\n\n  /**\n   * Easing function for the animation.\n   *\n   * @type {String}\n   */\n  animationTimingFunc: 'cubic-bezier(.165, .840, .440, 1)',\n\n  /**\n   * Throttle costly events at most once per every wait milliseconds.\n   *\n   * @type {Number}\n   */\n  throttle: 10,\n\n  /**\n   * Moving direction mode.\n   *\n   * Available inputs:\n   * - 'ltr' - left to right movement,\n   * - 'rtl' - right to left movement.\n   *\n   * @type {String}\n   */\n  direction: 'ltr',\n\n  /**\n   * The distance value of the next and previous viewports which\n   * have to peek in the current view. Accepts number and\n   * pixels as a string. Left and right peeking can be\n   * set up separately with a directions object.\n   *\n   * For example:\n   * `100` - Peek 100px on the both sides.\n   * { before: 100, after: 50 }` - Peek 100px on the left side and 50px on the right side.\n   *\n   * @type {Number|String|Object}\n   */\n  peek: 0,\n\n  /**\n   * Collection of options applied at specified media breakpoints.\n   * For example: display two slides per view under 800px.\n   * `{\n   *   '800px': {\n   *     perView: 2\n   *   }\n   * }`\n   */\n  breakpoints: {},\n\n  /**\n   * Collection of internally used HTML classes.\n   *\n   * @todo Refactor `slider` and `carousel` properties to single `type: { slider: '', carousel: '' }` object\n   * @type {Object}\n   */\n  classes: {\n    direction: {\n      ltr: 'glide--ltr',\n      rtl: 'glide--rtl'\n    },\n    slider: 'glide--slider',\n    carousel: 'glide--carousel',\n    swipeable: 'glide--swipeable',\n    dragging: 'glide--dragging',\n    cloneSlide: 'glide__slide--clone',\n    activeNav: 'glide__bullet--active',\n    activeSlide: 'glide__slide--active',\n    disabledArrow: 'glide__arrow--disabled'\n  }\n};\n\n/**\n * Outputs warning message to the bowser console.\n *\n * @param  {String} msg\n * @return {Void}\n */\nfunction warn(msg) {\n  console.error(\"[Glide warn]: \" + msg);\n}\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n/**\n * Converts value entered as number\n * or string to integer value.\n *\n * @param {String} value\n * @returns {Number}\n */\nfunction toInt(value) {\n  return parseInt(value);\n}\n\n/**\n * Converts value entered as number\n * or string to flat value.\n *\n * @param {String} value\n * @returns {Number}\n */\nfunction toFloat(value) {\n  return parseFloat(value);\n}\n\n/**\n * Indicates whether the specified value is a string.\n *\n * @param  {*}   value\n * @return {Boolean}\n */\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\n/**\n * Indicates whether the specified value is an object.\n *\n * @param  {*} value\n * @return {Boolean}\n *\n * @see https://github.com/jashkenas/underscore\n */\nfunction isObject(value) {\n  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n\n  return type === 'function' || type === 'object' && !!value; // eslint-disable-line no-mixed-operators\n}\n\n/**\n * Indicates whether the specified value is a number.\n *\n * @param  {*} value\n * @return {Boolean}\n */\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n/**\n * Indicates whether the specified value is a function.\n *\n * @param  {*} value\n * @return {Boolean}\n */\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\n/**\n * Indicates whether the specified value is undefined.\n *\n * @param  {*} value\n * @return {Boolean}\n */\nfunction isUndefined(value) {\n  return typeof value === 'undefined';\n}\n\n/**\n * Indicates whether the specified value is an array.\n *\n * @param  {*} value\n * @return {Boolean}\n */\nfunction isArray(value) {\n  return value.constructor === Array;\n}\n\n/**\n * Creates and initializes specified collection of extensions.\n * Each extension receives access to instance of glide and rest of components.\n *\n * @param {Object} glide\n * @param {Object} extensions\n *\n * @returns {Object}\n */\nfunction mount(glide, extensions, events) {\n  var components = {};\n\n  for (var name in extensions) {\n    if (isFunction(extensions[name])) {\n      components[name] = extensions[name](glide, components, events);\n    } else {\n      warn('Extension must be a function');\n    }\n  }\n\n  for (var _name in components) {\n    if (isFunction(components[_name].mount)) {\n      components[_name].mount();\n    }\n  }\n\n  return components;\n}\n\n/**\n * Defines getter and setter property on the specified object.\n *\n * @param  {Object} obj         Object where property has to be defined.\n * @param  {String} prop        Name of the defined property.\n * @param  {Object} definition  Get and set definitions for the property.\n * @return {Void}\n */\nfunction define(obj, prop, definition) {\n  Object.defineProperty(obj, prop, definition);\n}\n\n/**\n * Sorts aphabetically object keys.\n *\n * @param  {Object} obj\n * @return {Object}\n */\nfunction sortKeys(obj) {\n  return Object.keys(obj).sort().reduce(function (r, k) {\n    r[k] = obj[k];\n\n    return r[k], r;\n  }, {});\n}\n\n/**\n * Merges passed settings object with default options.\n *\n * @param  {Object} defaults\n * @param  {Object} settings\n * @return {Object}\n */\nfunction mergeOptions(defaults, settings) {\n  var options = _extends({}, defaults, settings);\n\n  // `Object.assign` do not deeply merge objects, so we\n  // have to do it manually for every nested object\n  // in options. Although it does not look smart,\n  // it's smaller and faster than some fancy\n  // merging deep-merge algorithm script.\n  if (settings.hasOwnProperty('classes')) {\n    options.classes = _extends({}, defaults.classes, settings.classes);\n\n    if (settings.classes.hasOwnProperty('direction')) {\n      options.classes.direction = _extends({}, defaults.classes.direction, settings.classes.direction);\n    }\n  }\n\n  if (settings.hasOwnProperty('breakpoints')) {\n    options.breakpoints = _extends({}, defaults.breakpoints, settings.breakpoints);\n  }\n\n  return options;\n}\n\nvar EventsBus = function () {\n  /**\n   * Construct a EventBus instance.\n   *\n   * @param {Object} events\n   */\n  function EventsBus() {\n    var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, EventsBus);\n\n    this.events = events;\n    this.hop = events.hasOwnProperty;\n  }\n\n  /**\n   * Adds listener to the specifed event.\n   *\n   * @param {String|Array} event\n   * @param {Function} handler\n   */\n\n\n  createClass(EventsBus, [{\n    key: 'on',\n    value: function on(event, handler) {\n      if (isArray(event)) {\n        for (var i = 0; i < event.length; i++) {\n          this.on(event[i], handler);\n        }\n      }\n\n      // Create the event's object if not yet created\n      if (!this.hop.call(this.events, event)) {\n        this.events[event] = [];\n      }\n\n      // Add the handler to queue\n      var index = this.events[event].push(handler) - 1;\n\n      // Provide handle back for removal of event\n      return {\n        remove: function remove() {\n          delete this.events[event][index];\n        }\n      };\n    }\n\n    /**\n     * Runs registered handlers for specified event.\n     *\n     * @param {String|Array} event\n     * @param {Object=} context\n     */\n\n  }, {\n    key: 'emit',\n    value: function emit(event, context) {\n      if (isArray(event)) {\n        for (var i = 0; i < event.length; i++) {\n          this.emit(event[i], context);\n        }\n      }\n\n      // If the event doesn't exist, or there's no handlers in queue, just leave\n      if (!this.hop.call(this.events, event)) {\n        return;\n      }\n\n      // Cycle through events queue, fire!\n      this.events[event].forEach(function (item) {\n        item(context || {});\n      });\n    }\n  }]);\n  return EventsBus;\n}();\n\nvar Glide = function () {\n  /**\r\n   * Construct glide.\r\n   *\r\n   * @param  {String} selector\r\n   * @param  {Object} options\r\n   */\n  function Glide(selector) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, Glide);\n\n    this._c = {};\n    this._t = [];\n    this._e = new EventsBus();\n\n    this.disabled = false;\n    this.selector = selector;\n    this.settings = mergeOptions(defaults, options);\n    this.index = this.settings.startAt;\n  }\n\n  /**\r\n   * Initializes glide.\r\n   *\r\n   * @param {Object} extensions Collection of extensions to initialize.\r\n   * @return {Glide}\r\n   */\n\n\n  createClass(Glide, [{\n    key: 'mount',\n    value: function mount$$1() {\n      var extensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this._e.emit('mount.before');\n\n      if (isObject(extensions)) {\n        this._c = mount(this, extensions, this._e);\n      } else {\n        warn('You need to provide a object on `mount()`');\n      }\n\n      this._e.emit('mount.after');\n\n      return this;\n    }\n\n    /**\r\n     * Collects an instance `translate` transformers.\r\n     *\r\n     * @param  {Array} transformers Collection of transformers.\r\n     * @return {Void}\r\n     */\n\n  }, {\n    key: 'mutate',\n    value: function mutate() {\n      var transformers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (isArray(transformers)) {\n        this._t = transformers;\n      } else {\n        warn('You need to provide a array on `mutate()`');\n      }\n\n      return this;\n    }\n\n    /**\r\n     * Updates glide with specified settings.\r\n     *\r\n     * @param {Object} settings\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'update',\n    value: function update() {\n      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      this.settings = mergeOptions(this.settings, settings);\n\n      if (settings.hasOwnProperty('startAt')) {\n        this.index = settings.startAt;\n      }\n\n      this._e.emit('update');\n\n      return this;\n    }\n\n    /**\r\n     * Change slide with specified pattern. A pattern must be in the special format:\r\n     * `>` - Move one forward\r\n     * `<` - Move one backward\r\n     * `={i}` - Go to {i} zero-based slide (eq. '=1', will go to second slide)\r\n     * `>>` - Rewinds to end (last slide)\r\n     * `<<` - Rewinds to start (first slide)\r\n     *\r\n     * @param {String} pattern\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'go',\n    value: function go(pattern) {\n      this._c.Run.make(pattern);\n\n      return this;\n    }\n\n    /**\r\n     * Move track by specified distance.\r\n     *\r\n     * @param {String} distance\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'move',\n    value: function move(distance) {\n      this._c.Transition.disable();\n      this._c.Move.make(distance);\n\n      return this;\n    }\n\n    /**\r\n     * Destroy instance and revert all changes done by this._c.\r\n     *\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this._e.emit('destroy');\n\n      return this;\n    }\n\n    /**\r\n     * Start instance autoplaying.\r\n     *\r\n     * @param {Boolean|Number} interval Run autoplaying with passed interval regardless of `autoplay` settings\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'play',\n    value: function play() {\n      var interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (interval) {\n        this.settings.autoplay = interval;\n      }\n\n      this._e.emit('play');\n\n      return this;\n    }\n\n    /**\r\n     * Stop instance autoplaying.\r\n     *\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this._e.emit('pause');\n\n      return this;\n    }\n\n    /**\r\n     * Sets glide into a idle status.\r\n     *\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'disable',\n    value: function disable() {\n      this.disabled = true;\n\n      return this;\n    }\n\n    /**\r\n     * Sets glide into a active status.\r\n     *\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'enable',\n    value: function enable() {\n      this.disabled = false;\n\n      return this;\n    }\n\n    /**\r\n     * Adds cuutom event listener with handler.\r\n     *\r\n     * @param  {String|Array} event\r\n     * @param  {Function} handler\r\n     * @return {Glide}\r\n     */\n\n  }, {\n    key: 'on',\n    value: function on(event, handler) {\n      this._e.on(event, handler);\n\n      return this;\n    }\n\n    /**\r\n     * Checks if glide is a precised type.\r\n     *\r\n     * @param  {String} name\r\n     * @return {Boolean}\r\n     */\n\n  }, {\n    key: 'isType',\n    value: function isType(name) {\n      return this.settings.type === name;\n    }\n\n    /**\r\n     * Gets value of the core options.\r\n     *\r\n     * @return {Object}\r\n     */\n\n  }, {\n    key: 'settings',\n    get: function get$$1() {\n      return this._o;\n    }\n\n    /**\r\n     * Sets value of the core options.\r\n     *\r\n     * @param  {Object} o\r\n     * @return {Void}\r\n     */\n    ,\n    set: function set$$1(o) {\n      if (isObject(o)) {\n        this._o = o;\n      } else {\n        warn('Options must be an `object` instance.');\n      }\n    }\n\n    /**\r\n     * Gets current index of the slider.\r\n     *\r\n     * @return {Object}\r\n     */\n\n  }, {\n    key: 'index',\n    get: function get$$1() {\n      return this._i;\n    }\n\n    /**\r\n     * Sets current index a slider.\r\n     *\r\n     * @return {Object}\r\n     */\n    ,\n    set: function set$$1(i) {\n      this._i = toInt(i);\n    }\n\n    /**\r\n     * Gets type name of the slider.\r\n     *\r\n     * @return {String}\r\n     */\n\n  }, {\n    key: 'type',\n    get: function get$$1() {\n      return this.settings.type;\n    }\n\n    /**\r\n     * Gets value of the idle status.\r\n     *\r\n     * @return {Boolean}\r\n     */\n\n  }, {\n    key: 'disabled',\n    get: function get$$1() {\n      return this._d;\n    }\n\n    /**\r\n     * Sets value of the idle status.\r\n     *\r\n     * @return {Boolean}\r\n     */\n    ,\n    set: function set$$1(status) {\n      this._d = !!status;\n    }\n  }]);\n  return Glide;\n}();\n\nfunction Run (Glide, Components, Events) {\n  var Run = {\n    /**\n     * Initializes autorunning of the glide.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      this._o = false;\n    },\n\n\n    /**\n     * Makes glides running based on the passed moving schema.\n     *\n     * @param {String} move\n     */\n    make: function make(move) {\n      var _this = this;\n\n      if (!Glide.disabled) {\n        Glide.disable();\n\n        this.move = move;\n\n        Events.emit('run.before', this.move);\n\n        this.calculate();\n\n        Events.emit('run', this.move);\n\n        Components.Transition.after(function () {\n          if (_this.isOffset('<') || _this.isOffset('>')) {\n            _this._o = false;\n\n            Events.emit('run.offset', _this.move);\n          }\n\n          Events.emit('run.after', _this.move);\n\n          Glide.enable();\n        });\n      }\n    },\n\n\n    /**\n     * Calculates current index based on defined move.\n     *\n     * @return {Void}\n     */\n    calculate: function calculate() {\n      var move = this.move,\n          length = this.length;\n      var steps = move.steps,\n          direction = move.direction;\n\n\n      var countableSteps = isNumber(toInt(steps)) && toInt(steps) !== 0;\n\n      switch (direction) {\n        case '>':\n          if (steps === '>') {\n            Glide.index = length;\n          } else if (this.isEnd()) {\n            if (!(Glide.isType('slider') && !Glide.settings.rewind)) {\n              this._o = true;\n\n              Glide.index = 0;\n            }\n\n            Events.emit('run.end', move);\n          } else if (countableSteps) {\n            Glide.index += Math.min(length - Glide.index, -toInt(steps));\n          } else {\n            Glide.index++;\n          }\n          break;\n\n        case '<':\n          if (steps === '<') {\n            Glide.index = 0;\n          } else if (this.isStart()) {\n            if (!(Glide.isType('slider') && !Glide.settings.rewind)) {\n              this._o = true;\n\n              Glide.index = length;\n            }\n\n            Events.emit('run.start', move);\n          } else if (countableSteps) {\n            Glide.index -= Math.min(Glide.index, toInt(steps));\n          } else {\n            Glide.index--;\n          }\n          break;\n\n        case '=':\n          Glide.index = steps;\n          break;\n      }\n    },\n\n\n    /**\n     * Checks if we are on the first slide.\n     *\n     * @return {Boolean}\n     */\n    isStart: function isStart() {\n      return Glide.index === 0;\n    },\n\n\n    /**\n     * Checks if we are on the last slide.\n     *\n     * @return {Boolean}\n     */\n    isEnd: function isEnd() {\n      return Glide.index === this.length;\n    },\n\n\n    /**\n     * Checks if we are making a offset run.\n     *\n     * @param {String} direction\n     * @return {Boolean}\n     */\n    isOffset: function isOffset(direction) {\n      return this._o && this.move.direction === direction;\n    }\n  };\n\n  define(Run, 'move', {\n    /**\n     * Gets value of the move schema.\n     *\n     * @returns {Object}\n     */\n    get: function get() {\n      return this._m;\n    },\n\n\n    /**\n     * Sets value of the move schema.\n     *\n     * @returns {Object}\n     */\n    set: function set(value) {\n      this._m = {\n        direction: value.substr(0, 1),\n        steps: value.substr(1) ? value.substr(1) : 0\n      };\n    }\n  });\n\n  define(Run, 'length', {\n    /**\n     * Gets value of the running distance based\n     * on zero-indexing number of slides.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      var settings = Glide.settings;\n      var length = Components.Html.slides.length;\n\n      // If the `bound` option is acitve, a maximum running distance should be\n      // reduced by `perView` and `focusAt` settings. Running distance\n      // should end before creating an empty space after instance.\n\n      if (Glide.isType('slider') && settings.focusAt !== 'center' && settings.bound) {\n        return length - 1 - (toInt(settings.perView) - 1) + toInt(settings.focusAt);\n      }\n\n      return length - 1;\n    }\n  });\n\n  define(Run, 'offset', {\n    /**\n     * Gets status of the offsetting flag.\n     *\n     * @return {Boolean}\n     */\n    get: function get() {\n      return this._o;\n    }\n  });\n\n  return Run;\n}\n\n/**\n * Returns a current time.\n *\n * @return {Number}\n */\nfunction now() {\n  return new Date().getTime();\n}\n\n/**\n * Returns a function, that, when invoked, will only be triggered\n * at most once during a given window of time.\n *\n * @param {Function} func\n * @param {Number} wait\n * @param {Object=} options\n * @return {Function}\n *\n * @see https://github.com/jashkenas/underscore\n */\nfunction throttle(func, wait, options) {\n  var timeout = void 0,\n      context = void 0,\n      args = void 0,\n      result = void 0;\n  var previous = 0;\n  if (!options) options = {};\n\n  var later = function later() {\n    previous = options.leading === false ? 0 : now();\n    timeout = null;\n    result = func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n\n  var throttled = function throttled() {\n    var at = now();\n    if (!previous && options.leading === false) previous = at;\n    var remaining = wait - (at - previous);\n    context = this;\n    args = arguments;\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = at;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n\n  throttled.cancel = function () {\n    clearTimeout(timeout);\n    previous = 0;\n    timeout = context = args = null;\n  };\n\n  return throttled;\n}\n\nvar MARGIN_TYPE = {\n  ltr: ['marginLeft', 'marginRight'],\n  rtl: ['marginRight', 'marginLeft']\n};\n\nfunction Gaps (Glide, Components, Events) {\n  var Gaps = {\n    /**\n     * Applies gaps between slides. First and last\n     * slides do not receive it's edge margins.\n     *\n     * @param {HTMLCollection} slides\n     * @return {Void}\n     */\n    apply: function apply(slides) {\n      for (var i = 0, len = slides.length; i < len; i++) {\n        var style = slides[i].style;\n        var direction = Components.Direction.value;\n\n        if (i !== 0) {\n          style[MARGIN_TYPE[direction][0]] = this.value / 2 + 'px';\n        } else {\n          style[MARGIN_TYPE[direction][0]] = '';\n        }\n\n        if (i !== slides.length - 1) {\n          style[MARGIN_TYPE[direction][1]] = this.value / 2 + 'px';\n        } else {\n          style[MARGIN_TYPE[direction][1]] = '';\n        }\n      }\n    },\n\n\n    /**\n     * Removes gaps from the slides.\n     *\n     * @param {HTMLCollection} slides\n     * @returns {Void}\n    */\n    remove: function remove(slides) {\n      for (var i = 0, len = slides.length; i < len; i++) {\n        var style = slides[i].style;\n\n        style.marginLeft = '';\n        style.marginRight = '';\n      }\n    }\n  };\n\n  define(Gaps, 'value', {\n    /**\n     * Gets value of the gap.\n     *\n     * @returns {Number}\n     */\n    get: function get() {\n      return toInt(Glide.settings.gap);\n    }\n  });\n\n  define(Gaps, 'grow', {\n    /**\n     * Gets additional dimentions value caused by gaps.\n     * Used to increase width of the slides wrapper.\n     *\n     * @returns {Number}\n     */\n    get: function get() {\n      return Gaps.value * (Components.Sizes.length - 1);\n    }\n  });\n\n  define(Gaps, 'reductor', {\n    /**\n     * Gets reduction value caused by gaps.\n     * Used to subtract width of the slides.\n     *\n     * @returns {Number}\n     */\n    get: function get() {\n      var perView = Glide.settings.perView;\n\n      return Gaps.value * (perView - 1) / perView;\n    }\n  });\n\n  /**\n   * Apply calculated gaps:\n   * - after building, so slides (including clones) will receive proper margins\n   * - on updating via API, to recalculate gaps with new options\n   */\n  Events.on(['build.after', 'update'], throttle(function () {\n    Gaps.apply(Components.Html.wrapper.children);\n  }, 30));\n\n  /**\n   * Remove gaps:\n   * - on destroying to bring markup to its inital state\n   */\n  Events.on('destroy', function () {\n    Gaps.remove(Components.Html.wrapper.children);\n  });\n\n  return Gaps;\n}\n\n/**\n * Finds siblings nodes of the passed node.\n *\n * @param  {Element} node\n * @return {Array}\n */\nfunction siblings(node) {\n  if (node && node.parentNode) {\n    var n = node.parentNode.firstChild;\n    var matched = [];\n\n    for (; n; n = n.nextSibling) {\n      if (n.nodeType === 1 && n !== node) {\n        matched.push(n);\n      }\n    }\n\n    return matched;\n  }\n\n  return [];\n}\n\n/**\n * Checks if passed node exist and is a valid element.\n *\n * @param  {Element} node\n * @return {Boolean}\n */\nfunction exist(node) {\n  if (node && node instanceof window.HTMLElement) {\n    return true;\n  }\n\n  return false;\n}\n\nvar TRACK_SELECTOR = '[data-glide-el=\"track\"]';\n\nfunction Html (Glide, Components) {\n  var Html = {\n    /**\n     * Setup slider HTML nodes.\n     *\n     * @param {Glide} glide\n     */\n    mount: function mount() {\n      this.root = Glide.selector;\n      this.track = this.root.querySelector(TRACK_SELECTOR);\n      this.slides = Array.prototype.slice.call(this.wrapper.children).filter(function (slide) {\n        return !slide.classList.contains(Glide.settings.classes.cloneSlide);\n      });\n    }\n  };\n\n  define(Html, 'root', {\n    /**\n     * Gets node of the glide main element.\n     *\n     * @return {Object}\n     */\n    get: function get() {\n      return Html._r;\n    },\n\n\n    /**\n     * Sets node of the glide main element.\n     *\n     * @return {Object}\n     */\n    set: function set(r) {\n      if (isString(r)) {\n        r = document.querySelector(r);\n      }\n\n      if (exist(r)) {\n        Html._r = r;\n      } else {\n        warn('Root element must be a existing Html node');\n      }\n    }\n  });\n\n  define(Html, 'track', {\n    /**\n     * Gets node of the glide track with slides.\n     *\n     * @return {Object}\n     */\n    get: function get() {\n      return Html._t;\n    },\n\n\n    /**\n     * Sets node of the glide track with slides.\n     *\n     * @return {Object}\n     */\n    set: function set(t) {\n      if (exist(t)) {\n        Html._t = t;\n      } else {\n        warn('Could not find track element. Please use ' + TRACK_SELECTOR + ' attribute.');\n      }\n    }\n  });\n\n  define(Html, 'wrapper', {\n    /**\n     * Gets node of the slides wrapper.\n     *\n     * @return {Object}\n     */\n    get: function get() {\n      return Html.track.children[0];\n    }\n  });\n\n  return Html;\n}\n\nfunction Peek (Glide, Components, Events) {\n  var Peek = {\n    /**\n     * Setups how much to peek based on settings.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      this.value = Glide.settings.peek;\n    }\n  };\n\n  define(Peek, 'value', {\n    /**\n     * Gets value of the peek.\n     *\n     * @returns {Number|Object}\n     */\n    get: function get() {\n      return Peek._v;\n    },\n\n\n    /**\n     * Sets value of the peek.\n     *\n     * @param {Number|Object} value\n     * @return {Void}\n     */\n    set: function set(value) {\n      if (isObject(value)) {\n        value.before = toInt(value.before);\n        value.after = toInt(value.after);\n      } else {\n        value = toInt(value);\n      }\n\n      Peek._v = value;\n    }\n  });\n\n  define(Peek, 'reductor', {\n    /**\n     * Gets reduction value caused by peek.\n     *\n     * @returns {Number}\n     */\n    get: function get() {\n      var value = Peek.value;\n      var perView = Glide.settings.perView;\n\n      if (isObject(value)) {\n        return value.before / perView + value.after / perView;\n      }\n\n      return value * 2 / perView;\n    }\n  });\n\n  /**\n   * Recalculate peeking sizes on:\n   * - when resizing window to update to proper percents\n   */\n  Events.on(['resize', 'update'], function () {\n    Peek.mount();\n  });\n\n  return Peek;\n}\n\nfunction Move (Glide, Components, Events) {\n  var Move = {\n    /**\n     * Constructs move component.\n     *\n     * @returns {Void}\n     */\n    mount: function mount() {\n      this._o = 0;\n    },\n\n\n    /**\n     * Calculates a movement value based on passed offset and currently active index.\n     *\n     * @param  {Number} offset\n     * @return {Void}\n     */\n    make: function make() {\n      var _this = this;\n\n      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      this.offset = offset;\n\n      Events.emit('move', {\n        movement: this.value\n      });\n\n      Components.Transition.after(function () {\n        Events.emit('move.after', {\n          movement: _this.value\n        });\n      });\n    }\n  };\n\n  define(Move, 'offset', {\n    /**\n     * Gets an offset value used to modify current translate.\n     *\n     * @return {Object}\n     */\n    get: function get() {\n      return Move._o;\n    },\n\n\n    /**\n     * Sets an offset value used to modify current translate.\n     *\n     * @return {Object}\n     */\n    set: function set(value) {\n      Move._o = !isUndefined(value) ? toInt(value) : 0;\n    }\n  });\n\n  define(Move, 'translate', {\n    /**\n     * Gets a raw movement value.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      return Components.Sizes.slideWidth * Glide.index;\n    }\n  });\n\n  define(Move, 'value', {\n    /**\n     * Gets an actual movement value corrected by offset.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      var offset = this.offset;\n      var translate = this.translate;\n\n      if (Components.Direction.is('rtl')) {\n        return translate + offset;\n      }\n\n      return translate - offset;\n    }\n  });\n\n  /**\n   * Make movement to proper slide on:\n   * - before build, so glide will start at `startAt` index\n   * - on each standard run to move to newly calculated index\n   */\n  Events.on(['build.before', 'run'], function () {\n    Move.make();\n  });\n\n  return Move;\n}\n\nfunction Sizes (Glide, Components, Events) {\n  var Sizes = {\n    /**\n     * Setups dimentions of slides.\n     *\n     * @return {Void}\n     */\n    setupSlides: function setupSlides() {\n      var width = this.slideWidth + 'px';\n      var slides = Components.Html.slides;\n\n      for (var i = 0; i < slides.length; i++) {\n        slides[i].style.width = width;\n      }\n    },\n\n\n    /**\n     * Setups dimentions of slides wrapper.\n     *\n     * @return {Void}\n     */\n    setupWrapper: function setupWrapper(dimention) {\n      Components.Html.wrapper.style.width = this.wrapperSize + 'px';\n    },\n\n\n    /**\n     * Removes applied styles from HTML elements.\n     *\n     * @returns {Void}\n     */\n    remove: function remove() {\n      var slides = Components.Html.slides;\n\n      for (var i = 0; i < slides.length; i++) {\n        slides[i].style.width = '';\n      }\n\n      Components.Html.wrapper.style.width = '';\n    }\n  };\n\n  define(Sizes, 'length', {\n    /**\n     * Gets count number of the slides.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      return Components.Html.slides.length;\n    }\n  });\n\n  define(Sizes, 'width', {\n    /**\n     * Gets width value of the glide.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      return Components.Html.root.offsetWidth;\n    }\n  });\n\n  define(Sizes, 'wrapperSize', {\n    /**\n     * Gets size of the slides wrapper.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      return Sizes.slideWidth * Sizes.length + Components.Gaps.grow + Components.Clones.grow;\n    }\n  });\n\n  define(Sizes, 'slideWidth', {\n    /**\n     * Gets width value of the single slide.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      return Sizes.width / Glide.settings.perView - Components.Peek.reductor - Components.Gaps.reductor;\n    }\n  });\n\n  /**\n   * Apply calculated glide's dimensions:\n   * - before building, so other dimentions (e.g. translate) will be calculated propertly\n   * - when resizing window to recalculate sildes dimensions\n   * - on updating via API, to calculate dimensions based on new options\n   */\n  Events.on(['build.before', 'resize', 'update'], function () {\n    Sizes.setupSlides();\n    Sizes.setupWrapper();\n  });\n\n  /**\n   * Remove calculated glide's dimensions:\n   * - on destoting to bring markup to its inital state\n   */\n  Events.on('destroy', function () {\n    Sizes.remove();\n  });\n\n  return Sizes;\n}\n\nfunction Build (Glide, Components, Events) {\n  var Build = {\n    /**\n     * Init glide building. Adds classes, sets\n     * dimensions and setups initial state.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      Events.emit('build.before');\n\n      this.typeClass();\n      this.activeClass();\n\n      Events.emit('build.after');\n    },\n\n\n    /**\n     * Adds `type` class to the glide element.\n     *\n     * @return {Void}\n     */\n    typeClass: function typeClass() {\n      Components.Html.root.classList.add(Glide.settings.classes[Glide.settings.type]);\n    },\n\n\n    /**\n     * Sets active class to current slide.\n     *\n     * @return {Void}\n     */\n    activeClass: function activeClass() {\n      var classes = Glide.settings.classes;\n      var slide = Components.Html.slides[Glide.index];\n\n      if (slide) {\n        slide.classList.add(classes.activeSlide);\n\n        siblings(slide).forEach(function (sibling) {\n          sibling.classList.remove(classes.activeSlide);\n        });\n      }\n    },\n\n\n    /**\n     * Removes HTML classes applied at building.\n     *\n     * @return {Void}\n     */\n    removeClasses: function removeClasses() {\n      var classes = Glide.settings.classes;\n\n      Components.Html.root.classList.remove(classes[Glide.settings.type]);\n\n      Components.Html.slides.forEach(function (sibling) {\n        sibling.classList.remove(classes.activeSlide);\n      });\n    }\n  };\n\n  /**\n   * Clear building classes:\n   * - on destroying to bring HTML to its initial state\n   * - on updating to remove classes before remounting component\n   */\n  Events.on(['destroy', 'update'], function () {\n    Build.removeClasses();\n  });\n\n  /**\n   * Remount component:\n   * - on resizing of the window to calculate new dimentions\n   * - on updating settings via API\n   */\n  Events.on(['resize', 'update'], function () {\n    Build.mount();\n  });\n\n  /**\n   * Swap active class of current slide:\n   * - after each move to the new index\n   */\n  Events.on('move.after', function () {\n    Build.activeClass();\n  });\n\n  return Build;\n}\n\nfunction Clones (Glide, Components, Events) {\n  var Clones = {\n    /**\n     * Create pattern map and collect slides to be cloned.\n     */\n    mount: function mount() {\n      this.items = [];\n\n      if (Glide.isType('carousel')) {\n        this.items = this.collect();\n      }\n    },\n\n\n    /**\n     * Collect clones with pattern.\n     *\n     * @return {Void}\n     */\n    collect: function collect() {\n      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var slides = Components.Html.slides;\n      var _Glide$settings = Glide.settings,\n          perView = _Glide$settings.perView,\n          classes = _Glide$settings.classes;\n\n\n      var peekIncrementer = +!!Glide.settings.peek;\n      var part = perView + peekIncrementer;\n      var start = slides.slice(0, part);\n      var end = slides.slice(-part);\n\n      for (var r = 0; r < Math.max(1, Math.floor(perView / slides.length)); r++) {\n        for (var i = 0; i < start.length; i++) {\n          var clone = start[i].cloneNode(true);\n\n          clone.classList.add(classes.cloneSlide);\n\n          items.push(clone);\n        }\n\n        for (var _i = 0; _i < end.length; _i++) {\n          var _clone = end[_i].cloneNode(true);\n\n          _clone.classList.add(classes.cloneSlide);\n\n          items.unshift(_clone);\n        }\n      }\n\n      return items;\n    },\n\n\n    /**\n     * Append cloned slides with generated pattern.\n     *\n     * @return {Void}\n     */\n    append: function append() {\n      var items = this.items;\n      var _Components$Html = Components.Html,\n          wrapper = _Components$Html.wrapper,\n          slides = _Components$Html.slides;\n\n\n      var half = Math.floor(items.length / 2);\n      var prepend = items.slice(0, half).reverse();\n      var append = items.slice(half, items.length);\n      var width = Components.Sizes.slideWidth + 'px';\n\n      for (var i = 0; i < append.length; i++) {\n        wrapper.appendChild(append[i]);\n      }\n\n      for (var _i2 = 0; _i2 < prepend.length; _i2++) {\n        wrapper.insertBefore(prepend[_i2], slides[0]);\n      }\n\n      for (var _i3 = 0; _i3 < items.length; _i3++) {\n        items[_i3].style.width = width;\n      }\n    },\n\n\n    /**\n     * Remove all cloned slides.\n     *\n     * @return {Void}\n     */\n    remove: function remove() {\n      var items = this.items;\n\n\n      for (var i = 0; i < items.length; i++) {\n        Components.Html.wrapper.removeChild(items[i]);\n      }\n    }\n  };\n\n  define(Clones, 'grow', {\n    /**\n     * Gets additional dimentions value caused by clones.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      return (Components.Sizes.slideWidth + Components.Gaps.value) * Clones.items.length;\n    }\n  });\n\n  /**\n   * Append additional slide's clones:\n   * - while glide's type is `carousel`\n   */\n  Events.on('update', function () {\n    Clones.remove();\n    Clones.mount();\n    Clones.append();\n  });\n\n  /**\n   * Append additional slide's clones:\n   * - while glide's type is `carousel`\n   */\n  Events.on('build.before', function () {\n    if (Glide.isType('carousel')) {\n      Clones.append();\n    }\n  });\n\n  /**\n   * Remove clones HTMLElements:\n   * - on destroying, to bring HTML to its initial state\n   */\n  Events.on('destroy', function () {\n    Clones.remove();\n  });\n\n  return Clones;\n}\n\nvar EventsBinder = function () {\n  /**\n   * Construct a EventsBinder instance.\n   */\n  function EventsBinder() {\n    var listeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    classCallCheck(this, EventsBinder);\n\n    this.listeners = listeners;\n  }\n\n  /**\n   * Adds events listeners to arrows HTML elements.\n   *\n   * @param  {String|Array} events\n   * @param  {Element|Window|Document} el\n   * @param  {Function} closure\n   * @param  {Boolean|Object} capture\n   * @return {Void}\n   */\n\n\n  createClass(EventsBinder, [{\n    key: 'on',\n    value: function on(events, el, closure) {\n      var capture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (isString(events)) {\n        events = [events];\n      }\n\n      for (var i = 0; i < events.length; i++) {\n        this.listeners[events[i]] = closure;\n\n        el.addEventListener(events[i], this.listeners[events[i]], capture);\n      }\n    }\n\n    /**\n     * Removes event listeners from arrows HTML elements.\n     *\n     * @param  {String|Array} events\n     * @param  {Element|Window|Document} el\n     * @param  {Boolean|Object} capture\n     * @return {Void}\n     */\n\n  }, {\n    key: 'off',\n    value: function off(events, el) {\n      var capture = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (isString(events)) {\n        events = [events];\n      }\n\n      for (var i = 0; i < events.length; i++) {\n        el.removeEventListener(events[i], this.listeners[events[i]], capture);\n      }\n    }\n\n    /**\n     * Destroy collected listeners.\n     *\n     * @returns {Void}\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      delete this.listeners;\n    }\n  }]);\n  return EventsBinder;\n}();\n\nfunction Resize (Glide, Components, Events) {\n  /**\n   * Instance of the binder for DOM Events.\n   *\n   * @type {EventsBinder}\n   */\n  var Binder = new EventsBinder();\n\n  var Resize = {\n    /**\n     * Initializes window bindings.\n     */\n    mount: function mount() {\n      this.bind();\n    },\n\n\n    /**\n     * Binds `rezsize` listener to the window.\n     * It's a costly event, so we are debouncing it.\n     *\n     * @return {Void}\n     */\n    bind: function bind() {\n      Binder.on('resize', window, throttle(function () {\n        Events.emit('resize');\n      }, Glide.settings.throttle));\n    },\n\n\n    /**\n     * Unbinds listeners from the window.\n     *\n     * @return {Void}\n     */\n    unbind: function unbind() {\n      Binder.off('resize', window);\n    }\n  };\n\n  /**\n   * Remove bindings from window:\n   * - on destroying, to remove added EventListener\n   */\n  Events.on('destroy', function () {\n    Resize.unbind();\n    Binder.destroy();\n  });\n\n  return Resize;\n}\n\nvar VALID_DIRECTIONS = ['ltr', 'rtl'];\nvar FLIPED_MOVEMENTS = {\n  '>': '<',\n  '<': '>',\n  '=': '='\n};\n\nfunction Direction (Glide, Components, Events) {\n  var Direction = {\n    /**\n     * Setups gap value based on settings.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      this.value = Glide.settings.direction;\n    },\n\n\n    /**\n     * Resolves pattern based on direction value\n     *\n     * @param {String} pattern\n     * @returns {String}\n     */\n    resolve: function resolve(pattern) {\n      var token = pattern.slice(0, 1);\n\n      if (this.is('rtl')) {\n        return pattern.split(token).join(FLIPED_MOVEMENTS[token]);\n      }\n\n      return pattern;\n    },\n\n\n    /**\n     * Checks value of direction mode.\n     *\n     * @param {String} direction\n     * @returns {Boolean}\n     */\n    is: function is(direction) {\n      return this.value === direction;\n    },\n\n\n    /**\n     * Applies direction class to the root HTML element.\n     *\n     * @return {Void}\n     */\n    addClass: function addClass() {\n      Components.Html.root.classList.add(Glide.settings.classes.direction[this.value]);\n    },\n\n\n    /**\n     * Removes direction class from the root HTML element.\n     *\n     * @return {Void}\n     */\n    removeClass: function removeClass() {\n      Components.Html.root.classList.remove(Glide.settings.classes.direction[this.value]);\n    }\n  };\n\n  define(Direction, 'value', {\n    /**\n     * Gets value of the direction.\n     *\n     * @returns {Number}\n     */\n    get: function get() {\n      return Direction._v;\n    },\n\n\n    /**\n     * Sets value of the direction.\n     *\n     * @param {String} value\n     * @return {Void}\n     */\n    set: function set(value) {\n      if (VALID_DIRECTIONS.indexOf(value) > -1) {\n        Direction._v = value;\n      } else {\n        warn('Direction value must be `ltr` or `rtl`');\n      }\n    }\n  });\n\n  /**\n   * Clear direction class:\n   * - on destroy to bring HTML to its initial state\n   * - on update to remove class before reappling bellow\n   */\n  Events.on(['destroy', 'update'], function () {\n    Direction.removeClass();\n  });\n\n  /**\n   * Remount component:\n   * - on update to reflect changes in direction value\n   */\n  Events.on('update', function () {\n    Direction.mount();\n  });\n\n  /**\n   * Apply direction class:\n   * - before building to apply class for the first time\n   * - on updating to reapply direction class that may changed\n   */\n  Events.on(['build.before', 'update'], function () {\n    Direction.addClass();\n  });\n\n  return Direction;\n}\n\n/**\n * Reflects value of glide movement.\n *\n * @param  {Object} Glide\n * @param  {Object} Components\n * @return {Object}\n */\nfunction Rtl (Glide, Components) {\n  return {\n    /**\n     * Negates the passed translate if glide is in RTL option.\n     *\n     * @param  {Number} translate\n     * @return {Number}\n     */\n    modify: function modify(translate) {\n      if (Components.Direction.is('rtl')) {\n        return -translate;\n      }\n\n      return translate;\n    }\n  };\n}\n\n/**\n * Updates glide movement with a `gap` settings.\n *\n * @param  {Object} Glide\n * @param  {Object} Components\n * @return {Object}\n */\nfunction Gap (Glide, Components) {\n  return {\n    /**\n     * Modifies passed translate value with number in the `gap` settings.\n     *\n     * @param  {Number} translate\n     * @return {Number}\n     */\n    modify: function modify(translate) {\n      return translate + Components.Gaps.value * Glide.index;\n    }\n  };\n}\n\n/**\n * Updates glide movement with width of additional clones width.\n *\n * @param  {Object} Glide\n * @param  {Object} Components\n * @return {Object}\n */\nfunction Grow (Glide, Components) {\n  return {\n    /**\n     * Adds to the passed translate width of the half of clones.\n     *\n     * @param  {Number} translate\n     * @return {Number}\n     */\n    modify: function modify(translate) {\n      return translate + Components.Clones.grow / 2;\n    }\n  };\n}\n\n/**\n * Updates glide movement with a `peek` settings.\n *\n * @param  {Object} Glide\n * @param  {Object} Components\n * @return {Object}\n */\nfunction Peeking (Glide, Components) {\n  return {\n    /**\n     * Modifies passed translate value with a `peek` setting.\n     *\n     * @param  {Number} translate\n     * @return {Number}\n     */\n    modify: function modify(translate) {\n      if (Glide.settings.focusAt >= 0) {\n        var peek = Components.Peek.value;\n\n        if (isObject(peek)) {\n          return translate - peek.before;\n        }\n\n        return translate - peek;\n      }\n\n      return translate;\n    }\n  };\n}\n\n/**\n * Updates glide movement with a `focusAt` settings.\n *\n * @param  {Object} Glide\n * @param  {Object} Components\n * @return {Object}\n */\nfunction Focusing (Glide, Components) {\n  return {\n    /**\n     * Modifies passed translate value with index in the `focusAt` setting.\n     *\n     * @param  {Number} translate\n     * @return {Number}\n     */\n    modify: function modify(translate) {\n      var gap = Components.Gaps.value;\n      var width = Components.Sizes.width;\n      var focusAt = Glide.settings.focusAt;\n      var slideWidth = Components.Sizes.slideWidth;\n\n      if (focusAt === 'center') {\n        return translate - (width / 2 - slideWidth / 2);\n      }\n\n      return translate - slideWidth * focusAt - gap * focusAt;\n    }\n  };\n}\n\n/**\n * Applies diffrent transformers on translate value.\n *\n * @param  {Object} Glide\n * @param  {Object} Components\n * @return {Object}\n */\nfunction mutator (Glide, Components, Events) {\n  /**\n   * Merge instance transformers with collection of default transformers.\n   * It's important that the Rtl component be last on the list,\n   * so it reflects all previous transformations.\n   *\n   * @type {Array}\n   */\n  var TRANSFORMERS = [Gap, Grow, Peeking, Focusing].concat(Glide._t, [Rtl]);\n\n  return {\n    /**\n     * Piplines translate value with registered transformers.\n     *\n     * @param  {Number} translate\n     * @return {Number}\n     */\n    mutate: function mutate(translate) {\n      for (var i = 0; i < TRANSFORMERS.length; i++) {\n        var transformer = TRANSFORMERS[i];\n\n        if (isFunction(transformer) && isFunction(transformer().modify)) {\n          translate = transformer(Glide, Components, Events).modify(translate);\n        } else {\n          warn('Transformer should be a function that returns an object with `modify()` method');\n        }\n      }\n\n      return translate;\n    }\n  };\n}\n\nfunction Translate (Glide, Components, Events) {\n  var Translate = {\n    /**\n     * Sets value of translate on HTML element.\n     *\n     * @param {Number} value\n     * @return {Void}\n     */\n    set: function set(value) {\n      var transform = mutator(Glide, Components).mutate(value);\n\n      Components.Html.wrapper.style.transform = 'translate3d(' + -1 * transform + 'px, 0px, 0px)';\n    },\n\n\n    /**\n     * Removes value of translate from HTML element.\n     *\n     * @return {Void}\n     */\n    remove: function remove() {\n      Components.Html.wrapper.style.transform = '';\n    }\n  };\n\n  /**\n   * Set new translate value:\n   * - on move to reflect index change\n   * - on updating via API to reflect possible changes in options\n   */\n  Events.on('move', function (context) {\n    var gap = Components.Gaps.value;\n    var length = Components.Sizes.length;\n    var width = Components.Sizes.slideWidth;\n\n    if (Glide.isType('carousel') && Components.Run.isOffset('<')) {\n      Components.Transition.after(function () {\n        Events.emit('translate.jump');\n\n        Translate.set(width * (length - 1));\n      });\n\n      return Translate.set(-width - gap * length);\n    }\n\n    if (Glide.isType('carousel') && Components.Run.isOffset('>')) {\n      Components.Transition.after(function () {\n        Events.emit('translate.jump');\n\n        Translate.set(0);\n      });\n\n      return Translate.set(width * length + gap * length);\n    }\n\n    return Translate.set(context.movement);\n  });\n\n  /**\n   * Remove translate:\n   * - on destroying to bring markup to its inital state\n   */\n  Events.on('destroy', function () {\n    Translate.remove();\n  });\n\n  return Translate;\n}\n\nfunction Transition (Glide, Components, Events) {\n  /**\n   * Holds inactivity status of transition.\n   * When true transition is not applied.\n   *\n   * @type {Boolean}\n   */\n  var disabled = false;\n\n  var Transition = {\n    /**\n     * Composes string of the CSS transition.\n     *\n     * @param {String} property\n     * @return {String}\n     */\n    compose: function compose(property) {\n      var settings = Glide.settings;\n\n      if (!disabled) {\n        return property + ' ' + this.duration + 'ms ' + settings.animationTimingFunc;\n      }\n\n      return property + ' 0ms ' + settings.animationTimingFunc;\n    },\n\n\n    /**\n     * Sets value of transition on HTML element.\n     *\n     * @param {String=} property\n     * @return {Void}\n     */\n    set: function set() {\n      var property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';\n\n      Components.Html.wrapper.style.transition = this.compose(property);\n    },\n\n\n    /**\n     * Removes value of transition from HTML element.\n     *\n     * @return {Void}\n     */\n    remove: function remove() {\n      Components.Html.wrapper.style.transition = '';\n    },\n\n\n    /**\n     * Runs callback after animation.\n     *\n     * @param  {Function} callback\n     * @return {Void}\n     */\n    after: function after(callback) {\n      setTimeout(function () {\n        callback();\n      }, this.duration);\n    },\n\n\n    /**\n     * Enable transition.\n     *\n     * @return {Void}\n     */\n    enable: function enable() {\n      disabled = false;\n\n      this.set();\n    },\n\n\n    /**\n     * Disable transition.\n     *\n     * @return {Void}\n     */\n    disable: function disable() {\n      disabled = true;\n\n      this.set();\n    }\n  };\n\n  define(Transition, 'duration', {\n    /**\n     * Gets duration of the transition based\n     * on currently running animation type.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      var settings = Glide.settings;\n\n      if (Glide.isType('slider') && Components.Run.offset) {\n        return settings.rewindDuration;\n      }\n\n      return settings.animationDuration;\n    }\n  });\n\n  /**\n   * Set transition `style` value:\n   * - on each moving, because it may be cleared by offset move\n   */\n  Events.on('move', function () {\n    Transition.set();\n  });\n\n  /**\n   * Disable transition:\n   * - before initial build to avoid transitioning from `0` to `startAt` index\n   * - while resizing window and recalculating dimentions\n   * - on jumping from offset transition at start and end edges in `carousel` type\n   */\n  Events.on(['build.before', 'resize', 'translate.jump'], function () {\n    Transition.disable();\n  });\n\n  /**\n   * Enable transition:\n   * - on each running, because it may be disabled by offset move\n   */\n  Events.on('run', function () {\n    Transition.enable();\n  });\n\n  /**\n   * Remove transition:\n   * - on destroying to bring markup to its inital state\n   */\n  Events.on('destroy', function () {\n    Transition.remove();\n  });\n\n  return Transition;\n}\n\n/**\n * Test via a getter in the options object to see\n * if the passive property is accessed.\n *\n * @see https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection\n */\n\nvar supportsPassive = false;\n\ntry {\n  var opts = Object.defineProperty({}, 'passive', {\n    get: function get() {\n      supportsPassive = true;\n    }\n  });\n\n  window.addEventListener('testPassive', null, opts);\n  window.removeEventListener('testPassive', null, opts);\n} catch (e) {}\n\nvar supportsPassive$1 = supportsPassive;\n\nvar START_EVENTS = ['touchstart', 'mousedown'];\nvar MOVE_EVENTS = ['touchmove', 'mousemove'];\nvar END_EVENTS = ['touchend', 'touchcancel', 'mouseup', 'mouseleave'];\nvar MOUSE_EVENTS = ['mousedown', 'mousemove', 'mouseup', 'mouseleave'];\n\nfunction Swipe (Glide, Components, Events) {\n  /**\n   * Instance of the binder for DOM Events.\n   *\n   * @type {EventsBinder}\n   */\n  var Binder = new EventsBinder();\n\n  var swipeSin = 0;\n  var swipeStartX = 0;\n  var swipeStartY = 0;\n  var disabled = false;\n  var moveable = true;\n  var capture = supportsPassive$1 ? { passive: true } : false;\n\n  var Swipe = {\n    /**\n     * Initializes swipe bindings.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      this.bindSwipeStart();\n    },\n\n\n    /**\n     * Handler for `swipestart` event. Calculates entry points of the user's tap.\n     *\n     * @param {Object} event\n     * @return {Void}\n     */\n    start: function start(event) {\n      if (!disabled && !Glide.disabled) {\n        this.disable();\n\n        var swipe = this.touches(event);\n\n        moveable = true;\n        swipeSin = null;\n        swipeStartX = toInt(swipe.pageX);\n        swipeStartY = toInt(swipe.pageY);\n\n        this.bindSwipeMove();\n        this.bindSwipeEnd();\n\n        Events.emit('swipe.start');\n      }\n    },\n\n\n    /**\n     * Handler for `swipemove` event. Calculates user's tap angle and distance.\n     *\n     * @param {Object} event\n     */\n    move: function move(event) {\n      if (!Glide.disabled) {\n        var _Glide$settings = Glide.settings,\n            touchAngle = _Glide$settings.touchAngle,\n            touchRatio = _Glide$settings.touchRatio,\n            classes = _Glide$settings.classes;\n\n\n        var swipe = this.touches(event);\n\n        var subExSx = toInt(swipe.pageX) - swipeStartX;\n        var subEySy = toInt(swipe.pageY) - swipeStartY;\n        var powEX = Math.abs(subExSx << 2);\n        var powEY = Math.abs(subEySy << 2);\n        var swipeHypotenuse = Math.sqrt(powEX + powEY);\n        var swipeCathetus = Math.sqrt(powEY);\n\n        swipeSin = Math.asin(swipeCathetus / swipeHypotenuse);\n\n        if (moveable && swipeSin * 180 / Math.PI < touchAngle) {\n          event.stopPropagation();\n\n          Components.Move.make(subExSx * toFloat(touchRatio));\n\n          Components.Html.root.classList.add(classes.dragging);\n\n          Events.emit('swipe.move');\n        } else {\n          moveable = false;\n\n          return false;\n        }\n      }\n    },\n\n\n    /**\n     * Handler for `swipeend` event. Finitializes user's tap and decides about glide move.\n     *\n     * @param {Object} event\n     * @return {Void}\n     */\n    end: function end(event) {\n      if (!Glide.disabled) {\n        var settings = Glide.settings;\n\n        var swipe = this.touches(event);\n        var threshold = this.threshold(event);\n\n        var swipeDistance = swipe.pageX - swipeStartX;\n        var swipeDeg = swipeSin * 180 / Math.PI;\n        var steps = Math.round(swipeDistance / Components.Sizes.slideWidth);\n\n        this.enable();\n\n        if (moveable) {\n          if (swipeDistance > threshold && swipeDeg < settings.touchAngle) {\n            // While swipe is positive and greater than threshold move backward.\n            if (settings.perTouch) {\n              steps = Math.min(steps, toInt(settings.perTouch));\n            }\n\n            if (Components.Direction.is('rtl')) {\n              steps = -steps;\n            }\n\n            Components.Run.make(Components.Direction.resolve('<' + steps));\n          } else if (swipeDistance < -threshold && swipeDeg < settings.touchAngle) {\n            // While swipe is negative and lower than negative threshold move forward.\n            if (settings.perTouch) {\n              steps = Math.max(steps, -toInt(settings.perTouch));\n            }\n\n            if (Components.Direction.is('rtl')) {\n              steps = -steps;\n            }\n\n            Components.Run.make(Components.Direction.resolve('>' + steps));\n          } else {\n            // While swipe don't reach distance apply previous transform.\n            Components.Move.make();\n          }\n        }\n\n        Components.Html.root.classList.remove(settings.classes.dragging);\n\n        this.unbindSwipeMove();\n        this.unbindSwipeEnd();\n\n        Events.emit('swipe.end');\n      }\n    },\n\n\n    /**\n     * Binds swipe's starting event.\n     *\n     * @return {Void}\n     */\n    bindSwipeStart: function bindSwipeStart() {\n      var _this = this;\n\n      var settings = Glide.settings;\n\n      if (settings.swipeThreshold) {\n        Binder.on(START_EVENTS[0], Components.Html.wrapper, function (event) {\n          _this.start(event);\n        }, capture);\n      }\n\n      if (settings.dragThreshold) {\n        Binder.on(START_EVENTS[1], Components.Html.wrapper, function (event) {\n          _this.start(event);\n        }, capture);\n      }\n    },\n\n\n    /**\n     * Unbinds swipe's starting event.\n     *\n     * @return {Void}\n     */\n    unbindSwipeStart: function unbindSwipeStart() {\n      Binder.off(START_EVENTS[0], Components.Html.wrapper, capture);\n      Binder.off(START_EVENTS[1], Components.Html.wrapper, capture);\n    },\n\n\n    /**\n     * Binds swipe's moving event.\n     *\n     * @return {Void}\n     */\n    bindSwipeMove: function bindSwipeMove() {\n      var _this2 = this;\n\n      Binder.on(MOVE_EVENTS, Components.Html.wrapper, throttle(function (event) {\n        _this2.move(event);\n      }, Glide.settings.throttle), capture);\n    },\n\n\n    /**\n     * Unbinds swipe's moving event.\n     *\n     * @return {Void}\n     */\n    unbindSwipeMove: function unbindSwipeMove() {\n      Binder.off(MOVE_EVENTS, Components.Html.wrapper, capture);\n    },\n\n\n    /**\n     * Binds swipe's ending event.\n     *\n     * @return {Void}\n     */\n    bindSwipeEnd: function bindSwipeEnd() {\n      var _this3 = this;\n\n      Binder.on(END_EVENTS, Components.Html.wrapper, function (event) {\n        _this3.end(event);\n      });\n    },\n\n\n    /**\n     * Unbinds swipe's ending event.\n     *\n     * @return {Void}\n     */\n    unbindSwipeEnd: function unbindSwipeEnd() {\n      Binder.off(END_EVENTS, Components.Html.wrapper);\n    },\n\n\n    /**\n     * Normalizes event touches points accorting to different types.\n     *\n     * @param {Object} event\n     */\n    touches: function touches(event) {\n      if (MOUSE_EVENTS.indexOf(event.type) > -1) {\n        return event;\n      }\n\n      return event.touches[0] || event.changedTouches[0];\n    },\n\n\n    /**\n     * Gets value of minimum swipe distance settings based on event type.\n     *\n     * @return {Number}\n     */\n    threshold: function threshold(event) {\n      var settings = Glide.settings;\n\n      if (MOUSE_EVENTS.indexOf(event.type) > -1) {\n        return settings.dragThreshold;\n      }\n\n      return settings.swipeThreshold;\n    },\n\n\n    /**\n     * Enables swipe event.\n     *\n     * @return {self}\n     */\n    enable: function enable() {\n      disabled = false;\n\n      Components.Transition.enable();\n\n      return this;\n    },\n\n\n    /**\n     * Disables swipe event.\n     *\n     * @return {self}\n     */\n    disable: function disable() {\n      disabled = true;\n\n      Components.Transition.disable();\n\n      return this;\n    }\n  };\n\n  /**\n   * Add component class:\n   * - after initial building\n   */\n  Events.on('build.after', function () {\n    Components.Html.root.classList.add(Glide.settings.classes.swipeable);\n  });\n\n  /**\n   * Remove swiping bindings:\n   * - on destroying, to remove added EventListeners\n   */\n  Events.on('destroy', function () {\n    Swipe.unbindSwipeStart();\n    Swipe.unbindSwipeMove();\n    Swipe.unbindSwipeEnd();\n    Binder.destroy();\n  });\n\n  return Swipe;\n}\n\nfunction Images (Glide, Components, Events) {\n  /**\n   * Instance of the binder for DOM Events.\n   *\n   * @type {EventsBinder}\n   */\n  var Binder = new EventsBinder();\n\n  var Images = {\n    /**\n     * Binds listener to glide wrapper.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      this.bind();\n    },\n\n\n    /**\n     * Binds `dragstart` event on wrapper to prevent dragging images.\n     *\n     * @return {Void}\n     */\n    bind: function bind() {\n      Binder.on('dragstart', Components.Html.wrapper, this.dragstart);\n    },\n\n\n    /**\n     * Unbinds `dragstart` event on wrapper.\n     *\n     * @return {Void}\n     */\n    unbind: function unbind() {\n      Binder.off('dragstart', Components.Html.wrapper);\n    },\n\n\n    /**\n     * Event handler. Prevents dragging.\n     *\n     * @return {Void}\n     */\n    dragstart: function dragstart(event) {\n      event.preventDefault();\n    }\n  };\n\n  /**\n   * Remove bindings from images:\n   * - on destroying, to remove added EventListeners\n   */\n  Events.on('destroy', function () {\n    Images.unbind();\n    Binder.destroy();\n  });\n\n  return Images;\n}\n\nfunction Anchors (Glide, Components, Events) {\n  /**\n   * Instance of the binder for DOM Events.\n   *\n   * @type {EventsBinder}\n   */\n  var Binder = new EventsBinder();\n\n  /**\n   * Holds detaching status of anchors.\n   * Prevents detaching of already detached anchors.\n   *\n   * @private\n   * @type {Boolean}\n   */\n  var detached = false;\n\n  /**\n   * Holds preventing status of anchors.\n   * If `true` redirection after click will be disabled.\n   *\n   * @private\n   * @type {Boolean}\n   */\n  var prevented = false;\n\n  var Anchors = {\n    /**\n     * Setups a initial state of anchors component.\n     *\n     * @returns {Void}\n     */\n    mount: function mount() {\n      /**\n       * Holds collection of anchors elements.\n       *\n       * @private\n       * @type {HTMLCollection}\n       */\n      this._a = Components.Html.wrapper.querySelectorAll('a');\n\n      this.bind();\n    },\n\n\n    /**\n     * Binds events to anchors inside a track.\n     *\n     * @return {Void}\n     */\n    bind: function bind() {\n      Binder.on('click', Components.Html.wrapper, this.click);\n    },\n\n\n    /**\n     * Unbinds events attached to anchors inside a track.\n     *\n     * @return {Void}\n     */\n    unbind: function unbind() {\n      Binder.off('click', Components.Html.wrapper);\n    },\n\n\n    /**\n     * Handler for click event. Prevents clicks when glide is in `prevent` status.\n     *\n     * @param  {Object} event\n     * @return {Void}\n     */\n    click: function click(event) {\n      if (prevented) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    },\n\n\n    /**\n     * Detaches anchors click event inside glide.\n     *\n     * @return {self}\n     */\n    detach: function detach() {\n      prevented = true;\n\n      if (!detached) {\n        for (var i = 0; i < this.items.length; i++) {\n          this.items[i].draggable = false;\n\n          this.items[i].setAttribute('data-href', this.items[i].getAttribute('href'));\n\n          this.items[i].removeAttribute('href');\n        }\n\n        detached = true;\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Attaches anchors click events inside glide.\n     *\n     * @return {self}\n     */\n    attach: function attach() {\n      prevented = false;\n\n      if (detached) {\n        for (var i = 0; i < this.items.length; i++) {\n          this.items[i].draggable = true;\n\n          this.items[i].setAttribute('href', this.items[i].getAttribute('data-href'));\n        }\n\n        detached = false;\n      }\n\n      return this;\n    }\n  };\n\n  define(Anchors, 'items', {\n    /**\n     * Gets collection of the arrows HTML elements.\n     *\n     * @return {HTMLElement[]}\n     */\n    get: function get() {\n      return Anchors._a;\n    }\n  });\n\n  /**\n   * Detach anchors inside slides:\n   * - on swiping, so they won't redirect to its `href` attributes\n   */\n  Events.on('swipe.move', function () {\n    Anchors.detach();\n  });\n\n  /**\n   * Attach anchors inside slides:\n   * - after swiping and transitions ends, so they can redirect after click again\n   */\n  Events.on('swipe.end', function () {\n    Components.Transition.after(function () {\n      Anchors.attach();\n    });\n  });\n\n  /**\n   * Unbind anchors inside slides:\n   * - on destroying, to bring anchors to its initial state\n   */\n  Events.on('destroy', function () {\n    Anchors.attach();\n    Anchors.unbind();\n    Binder.destroy();\n  });\n\n  return Anchors;\n}\n\nvar NAV_SELECTOR = '[data-glide-el=\"controls[nav]\"]';\nvar CONTROLS_SELECTOR = '[data-glide-el^=\"controls\"]';\n\nfunction Controls (Glide, Components, Events) {\n  /**\n   * Instance of the binder for DOM Events.\n   *\n   * @type {EventsBinder}\n   */\n  var Binder = new EventsBinder();\n\n  var Controls = {\n    /**\n     * Inits arrows. Binds events listeners\n     * to the arrows HTML elements.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      /**\n       * Collection of navigation HTML elements.\n       *\n       * @private\n       * @type {HTMLCollection}\n       */\n      this._n = Components.Html.root.querySelectorAll(NAV_SELECTOR);\n\n      /**\n       * Collection of controls HTML elements.\n       *\n       * @private\n       * @type {HTMLCollection}\n       */\n      this._c = Components.Html.root.querySelectorAll(CONTROLS_SELECTOR);\n\n      this.addBindings();\n    },\n\n\n    /**\n     * Sets active class to current slide.\n     *\n     * @return {Void}\n     */\n    setActive: function setActive() {\n      for (var i = 0; i < this._n.length; i++) {\n        this.addClass(this._n[i].children);\n      }\n    },\n\n\n    /**\n     * Removes active class to current slide.\n     *\n     * @return {Void}\n     */\n    removeActive: function removeActive() {\n      for (var i = 0; i < this._n.length; i++) {\n        this.removeClass(this._n[i].children);\n      }\n    },\n\n\n    /**\n     * Toggles active class on items inside navigation.\n     *\n     * @param  {HTMLElement} controls\n     * @return {Void}\n     */\n    addClass: function addClass(controls) {\n      var settings = Glide.settings;\n      var item = controls[Glide.index];\n\n      item.classList.add(settings.classes.activeNav);\n\n      siblings(item).forEach(function (sibling) {\n        sibling.classList.remove(settings.classes.activeNav);\n      });\n    },\n\n\n    /**\n     * Removes active class from active control.\n     *\n     * @param  {HTMLElement} controls\n     * @return {Void}\n     */\n    removeClass: function removeClass(controls) {\n      controls[Glide.index].classList.remove(Glide.settings.classes.activeNav);\n    },\n\n\n    /**\n     * Adds handles to the each group of controls.\n     *\n     * @return {Void}\n     */\n    addBindings: function addBindings() {\n      for (var i = 0; i < this._c.length; i++) {\n        this.bind(this._c[i].children);\n      }\n    },\n\n\n    /**\n     * Removes handles from the each group of controls.\n     *\n     * @return {Void}\n     */\n    removeBindings: function removeBindings() {\n      for (var i = 0; i < this._c.length; i++) {\n        this.unbind(this._c[i].children);\n      }\n    },\n\n\n    /**\n     * Binds events to arrows HTML elements.\n     *\n     * @param {HTMLCollection} elements\n     * @return {Void}\n     */\n    bind: function bind(elements) {\n      for (var i = 0; i < elements.length; i++) {\n        Binder.on(['click', 'touchstart'], elements[i], this.click);\n      }\n    },\n\n\n    /**\n     * Unbinds events binded to the arrows HTML elements.\n     *\n     * @param {HTMLCollection} elements\n     * @return {Void}\n     */\n    unbind: function unbind(elements) {\n      for (var i = 0; i < elements.length; i++) {\n        Binder.off(['click', 'touchstart'], elements[i]);\n      }\n    },\n\n\n    /**\n     * Handles `click` event on the arrows HTML elements.\n     * Moves slider in driection precised in\n     * `data-glide-dir` attribute.\n     *\n     * @param {Object} event\n     * @return {Void}\n     */\n    click: function click(event) {\n      event.preventDefault();\n\n      Components.Run.make(Components.Direction.resolve(event.currentTarget.getAttribute('data-glide-dir')));\n    }\n  };\n\n  define(Controls, 'items', {\n    /**\n     * Gets collection of the controls HTML elements.\n     *\n     * @return {HTMLElement[]}\n     */\n    get: function get() {\n      return Controls._c;\n    }\n  });\n\n  /**\n   * Swap active class of current navigation item:\n   * - after mounting to set it to initial index\n   * - after each move to the new index\n   */\n  Events.on(['mount.after', 'move.after'], function () {\n    Controls.setActive();\n  });\n\n  /**\n   * Remove bindings and HTML Classes:\n   * - on destroying, to bring markup to its initial state\n   */\n  Events.on('destroy', function () {\n    Controls.removeBindings();\n    Controls.removeActive();\n    Binder.destroy();\n  });\n\n  return Controls;\n}\n\nfunction Keyboard (Glide, Components, Events) {\n  /**\n   * Instance of the binder for DOM Events.\n   *\n   * @type {EventsBinder}\n   */\n  var Binder = new EventsBinder();\n\n  var Keyboard = {\n    /**\n     * Binds keyboard events on component mount.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      if (Glide.settings.keyboard) {\n        this.bind();\n      }\n    },\n\n\n    /**\n     * Adds keyboard press events.\n     *\n     * @return {Void}\n     */\n    bind: function bind() {\n      Binder.on('keyup', document, this.press);\n    },\n\n\n    /**\n     * Removes keyboard press events.\n     *\n     * @return {Void}\n     */\n    unbind: function unbind() {\n      Binder.off('keyup', document);\n    },\n\n\n    /**\n     * Handles keyboard's arrows press and moving glide foward and backward.\n     *\n     * @param  {Object} event\n     * @return {Void}\n     */\n    press: function press(event) {\n      if (event.keyCode === 39) {\n        Components.Run.make(Components.Direction.resolve('>'));\n      }\n\n      if (event.keyCode === 37) {\n        Components.Run.make(Components.Direction.resolve('<'));\n      }\n    }\n  };\n\n  /**\n   * Remove bindings from keyboard:\n   * - on destroying to remove added events\n   * - on updating to remove events before remounting\n   */\n  Events.on(['destroy', 'update'], function () {\n    Keyboard.unbind();\n  });\n\n  /**\n   * Remount component\n   * - on updating to reflect potential changes in settings\n   */\n  Events.on('update', function () {\n    Keyboard.mount();\n  });\n\n  /**\n   * Destroy binder:\n   * - on destroying to remove listeners\n   */\n  Events.on('destroy', function () {\n    Binder.destroy();\n  });\n\n  return Keyboard;\n}\n\nfunction Autoplay (Glide, Components, Events) {\n  /**\n   * Instance of the binder for DOM Events.\n   *\n   * @type {EventsBinder}\n   */\n  var Binder = new EventsBinder();\n\n  var Autoplay = {\n    /**\n     * Initializes autoplaying and events.\n     *\n     * @return {Void}\n     */\n    mount: function mount() {\n      this.start();\n\n      if (Glide.settings.hoverpause) {\n        this.bind();\n      }\n    },\n\n\n    /**\n     * Starts autoplaying in configured interval.\n     *\n     * @param {Boolean|Number} force Run autoplaying with passed interval regardless of `autoplay` settings\n     * @return {Void}\n     */\n    start: function start() {\n      var _this = this;\n\n      if (Glide.settings.autoplay) {\n        if (isUndefined(this._i)) {\n          this._i = setInterval(function () {\n            _this.stop();\n\n            Components.Run.make('>');\n\n            _this.start();\n          }, this.time);\n        }\n      }\n    },\n\n\n    /**\n     * Stops autorunning of the glide.\n     *\n     * @return {Void}\n     */\n    stop: function stop() {\n      this._i = clearInterval(this._i);\n    },\n\n\n    /**\n     * Stops autoplaying while mouse is over glide's area.\n     *\n     * @return {Void}\n     */\n    bind: function bind() {\n      var _this2 = this;\n\n      Binder.on('mouseover', Components.Html.root, function () {\n        _this2.stop();\n      });\n\n      Binder.on('mouseout', Components.Html.root, function () {\n        _this2.start();\n      });\n    },\n\n\n    /**\n     * Unbind mouseover events.\n     *\n     * @returns {Void}\n     */\n    unbind: function unbind() {\n      Binder.off(['mouseover', 'mouseout'], Components.Html.root);\n    }\n  };\n\n  define(Autoplay, 'time', {\n    /**\n     * Gets time period value for the autoplay interval. Prioritizes\n     * times in `data-glide-autoplay` attrubutes over options.\n     *\n     * @return {Number}\n     */\n    get: function get() {\n      var autoplay = Components.Html.slides[Glide.index].getAttribute('data-glide-autoplay');\n\n      if (autoplay) {\n        return toInt(autoplay);\n      }\n\n      return toInt(Glide.settings.autoplay);\n    }\n  });\n\n  /**\n   * Stop autoplaying and unbind events:\n   * - on destroying, to clear defined interval\n   * - on updating via API to reset interval that may changed\n   */\n  Events.on(['destroy', 'update'], function () {\n    Autoplay.unbind();\n  });\n\n  /**\n   * Stop autoplaying:\n   * - before each run, to restart autoplaying\n   * - on pausing via API\n   * - on destroying, to clear defined interval\n   * - while starting a swipe\n   * - on updating via API to reset interval that may changed\n   */\n  Events.on(['run.before', 'pause', 'destroy', 'swipe.start', 'update'], function () {\n    Autoplay.stop();\n  });\n\n  /**\n   * Start autoplaying:\n   * - after each run, to restart autoplaying\n   * - on playing via API\n   * - while ending a swipe\n   */\n  Events.on(['run.after', 'play', 'swipe.end'], function () {\n    Autoplay.start();\n  });\n\n  /**\n   * Remount autoplaying:\n   * - on updating via API to reset interval that may changed\n   */\n  Events.on('update', function () {\n    Autoplay.mount();\n  });\n\n  /**\n   * Destroy a binder:\n   * - on destroying glide instance to clearup listeners\n   */\n  Events.on('destroy', function () {\n    Binder.destroy();\n  });\n\n  return Autoplay;\n}\n\n/**\n * Sorts keys of breakpoint object so they will be ordered from lower to bigger.\n *\n * @param {Object} points\n * @returns {Object}\n */\nfunction sortBreakpoints(points) {\n  if (isObject(points)) {\n    return sortKeys(points);\n  } else {\n    warn('Breakpoints option must be an object');\n  }\n\n  return {};\n}\n\nfunction Breakpoints (Glide, Components, Events) {\n  /**\n   * Instance of the binder for DOM Events.\n   *\n   * @type {EventsBinder}\n   */\n  var Binder = new EventsBinder();\n\n  /**\n   * Holds reference to settings.\n   *\n   * @type {Object}\n   */\n  var settings = Glide.settings;\n\n  /**\n   * Holds reference to breakpoints object in settings. Sorts breakpoints\n   * from smaller to larger. It is required in order to proper\n   * matching currently active breakpoint settings.\n   *\n   * @type {Object}\n   */\n  var points = sortBreakpoints(settings.breakpoints);\n\n  /**\n   * Cache initial settings before overwritting.\n   *\n   * @type {Object}\n   */\n  var defaults = _extends({}, settings);\n\n  var Breakpoints = {\n    /**\n     * Matches settings for currectly matching media breakpoint.\n     *\n     * @param {Object} points\n     * @returns {Object}\n     */\n    match: function match(points) {\n      if (typeof window.matchMedia !== 'undefined') {\n        for (var point in points) {\n          if (points.hasOwnProperty(point)) {\n            if (window.matchMedia('(max-width: ' + point + 'px)').matches) {\n              return points[point];\n            }\n          }\n        }\n      }\n\n      return defaults;\n    }\n  };\n\n  /**\n   * Overwrite instance settings with currently matching breakpoint settings.\n   * This happens right after component initialization.\n   */\n  _extends(settings, Breakpoints.match(points));\n\n  /**\n   * Update glide with settings of matched brekpoint:\n   * - window resize to update slider\n   */\n  Binder.on('resize', window, throttle(function () {\n    Glide.settings = mergeOptions(settings, Breakpoints.match(points));\n  }, Glide.settings.throttle));\n\n  /**\n   * Resort and update default settings:\n   * - on reinit via API, so breakpoint matching will be performed with options\n   */\n  Events.on('update', function () {\n    points = sortBreakpoints(points);\n\n    defaults = _extends({}, settings);\n  });\n\n  /**\n   * Unbind resize listener:\n   * - on destroying, to bring markup to its initial state\n   */\n  Events.on('destroy', function () {\n    Binder.off('resize', window);\n  });\n\n  return Breakpoints;\n}\n\nvar COMPONENTS = {\n  // Required\n  Html: Html,\n  Translate: Translate,\n  Transition: Transition,\n  Direction: Direction,\n  Peek: Peek,\n  Sizes: Sizes,\n  Gaps: Gaps,\n  Move: Move,\n  Clones: Clones,\n  Resize: Resize,\n  Build: Build,\n  Run: Run,\n\n  // Optional\n  Swipe: Swipe,\n  Images: Images,\n  Anchors: Anchors,\n  Controls: Controls,\n  Keyboard: Keyboard,\n  Autoplay: Autoplay,\n  Breakpoints: Breakpoints\n};\n\nvar Glide$1 = function (_Core) {\n  inherits(Glide$$1, _Core);\n\n  function Glide$$1() {\n    classCallCheck(this, Glide$$1);\n    return possibleConstructorReturn(this, (Glide$$1.__proto__ || Object.getPrototypeOf(Glide$$1)).apply(this, arguments));\n  }\n\n  createClass(Glide$$1, [{\n    key: 'mount',\n    value: function mount() {\n      var extensions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      return get(Glide$$1.prototype.__proto__ || Object.getPrototypeOf(Glide$$1.prototype), 'mount', this).call(this, _extends({}, COMPONENTS, extensions));\n    }\n  }]);\n  return Glide$$1;\n}(Glide);\n\nexport default Glide$1;\n"],"sourceRoot":""}